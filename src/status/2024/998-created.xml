<item>
   <title>Issue #998 created</title>
   <pubDate>2024-02-04T03:57:52Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/998</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-998</guid>
   <description>&lt;div&gt;&lt;p&gt;regular expression addition - lookbehind assertions and lookahead assertions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;look-ahead assertions are i think the most useful things not found in qt regular expressions, and also look-behind.&lt;/p&gt;
&lt;p&gt;This lets you do things like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  replace( ., '
     / ( [^/]+ ) (*positive_lookahead: /)
    ', '...', 'x')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;replacing components between /..../ but not consuming the trailing /, so that
/a/b/c/d/ comes out as /../../../../&lt;/p&gt;
&lt;p&gt;Perl uses
(?=pattern), (*pla:pattern), (*positive_lookahead:pattern)
(?!pattern), (*nla:pattern), (*negative_lookahead:pattern)
to match only if the pattern is (or is not) followed by a match to pattern,&lt;/p&gt;
&lt;p&gt;and
(?&amp;lt;=pattern), \K, (*plb:pattern), (*popsitive_lookbehind:pattern)
(?&amp;lt;!pattern), (*nlb:pattern), (*negative_lookbehind:pattern)
for zero-width look-behind assertions.&lt;/p&gt;
&lt;p&gt;Note, libpcre (and older Perl version) restrict lookbehind assertions to fixed length. You can write
(?&amp;lt;=dog|cat) food
to match " food" preceded by "dog" or "cat", but you cannot write
(?&amp;lt;=dogs?|cats?) barking&lt;/p&gt;
&lt;p&gt;\C is also forbidden, as are capturing subgroups. But the facility is still very useful, and reduces the need for repeated substitutions.&lt;/p&gt;
&lt;p&gt;I propose adding only the first form in each case, not the newer "*" forms, which are less widely supported.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
