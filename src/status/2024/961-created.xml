<item>
   <title>Issue #961 created</title>
   <pubDate>2024-01-20T10:11:12Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/961</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-961</guid>
   <description>&lt;div&gt;&lt;p&gt;Simulating Objects: Performance&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Related to #953, #917 and #916, I wonder whether we are aware enough of the essential differences when we think of objects in a functional language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutable objects are extremely efficient, as an update is a simple main-memory value change.&lt;/li&gt;
&lt;li&gt;Immutable data structures need to be fully copied if a single value changes. As a result, the update of a map with, let’s say, 1 string and 50 functions would be a new map with 1 string and 50 functions. Even with efficient immutable map implementations that we have, I doubt that it makes sense to create full copies with 1+50 entries, of which only 1 string will be different.&lt;/li&gt;
&lt;li&gt;Imagine a FLWOR expression that creates 1000 of such maps, with possibly 1 value that’s different in each instance. We don’t need 1000 copies of 50 functions; the memory consumption would be much smaller if we only stored relevant values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This thread is not about premature optimization; I just want to be sure we think about the obstacles when using maps for objects. Maybe the solutions are already on the horizon; maybe we could tackle some of the concerns with the definition of default values…&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare record person(
  name   as xs:string,
  title  := (),
  full   := fn { string-join((?title, ?name), ' ') }
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…and maps with type annotations. If we don’t materialize defaults, the embedded annotation would indeed need to effect functions like &lt;code&gt;map:get&lt;/code&gt;, as questioned by Michael in https://github.com/qt4cg/qtspecs/pull/953#issuecomment-1896078605.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
