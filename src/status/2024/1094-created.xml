<item>
   <title>Issue #1094 created</title>
   <pubDate>2024-03-18T09:25:09Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1094</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1094</guid>
   <description>&lt;div&gt;&lt;p&gt;Axis steps in lookup expressions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue picks up where issue #341, issue #350, issue #596, issue #960 etc left off - an attempt to find better syntax and semantics for navigation within JTrees (by which I mean trees of maps and arrays). The problems we are addressing are well aired in those previous issues. There are new opportunities for improving navigation within pinned trees, where upwards navigation becomes possible.&lt;/p&gt;
&lt;p&gt;Firstly I propose that the existing constructs &lt;code&gt;?*&lt;/code&gt;, &lt;code&gt;?key&lt;/code&gt;, and &lt;code&gt;?1&lt;/code&gt; be treated as abbreviations for &lt;code&gt;?content::*&lt;/code&gt;, &lt;code&gt;?content::key&lt;/code&gt;, and &lt;code&gt;?content::1&lt;/code&gt; respectively. The content axis delivers a flattened sequence of items.&lt;/p&gt;
&lt;p&gt;Then I propose we introduce an &lt;code&gt;entry&lt;/code&gt; axis. &lt;code&gt;?entry::*&lt;/code&gt;, &lt;code&gt;?entry::key&lt;/code&gt;, and &lt;code&gt;?entry::1&lt;/code&gt; deliver their results as a sequence of key value pairs, in the style of &lt;code&gt;map:pairs()&lt;/code&gt;. Arrays for this purpose are treated as maps with integer keys. For example if &lt;code&gt;$A&lt;/code&gt; is &lt;code&gt;[(1,2), (3,4)]&lt;/code&gt; then &lt;code&gt;$A?entry::*&lt;/code&gt; delivers &lt;code&gt;(map{'key':1, 'value':(1,2)}, map{'key':2 'value':(3,4)}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This applies equally to the deep lookup operator. &lt;code&gt;$A??entry::*&lt;/code&gt; returns all the key-value pairs within the JTree rooted at $A, recursively.&lt;/p&gt;
&lt;p&gt;We could also consider a &lt;code&gt;value&lt;/code&gt; axis which delivers a sequence of arrays containing the values, losing the associated keys.&lt;/p&gt;
&lt;p&gt;If values are labelled, as a result of being found by navigating a pinned JTree. then upwards navigation is also possible. For an item in a pinned tree,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;containing-entry::*&lt;/code&gt; delivers the containing entry as a key-value pair. Duplicates are eliminated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;owner::*&lt;/code&gt; delivers the immediately containing map or array as identified by the label&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ownership::*&lt;/code&gt; delivers the transitive closure of the &lt;code&gt;owner::*&lt;/code&gt; axis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;peer::*&lt;/code&gt; delivers &lt;code&gt;owner::*/entry::*&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;following-member::*&lt;/code&gt; delivers the subarray of the containing array that follows the current entry&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;preceding-member::*&lt;/code&gt; delivers the subarray of the containing array thay precedes the current entry&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, improved names for these concepts are welcomed!&lt;/p&gt;
&lt;p&gt;In these examples I have used &lt;code&gt;*&lt;/code&gt; to select everything on the relevant axis. This can always be replaced by a key specifier K that selects the item only if it is labelled with a key K. So for example ownership::address selects the containing maps and arrays that are themselves in a map entry with key "address".&lt;/p&gt;
&lt;p&gt;I think we also need a convenient way to filter the selection by type (see issue #859 for a problem with the current syntax). I propose&lt;/p&gt;
&lt;p&gt;&lt;code&gt;??content::[record(longitude, latitude)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to select all items in the recursive content that match type &lt;code&gt;record(longitude, latitude)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Similarly&lt;/p&gt;
&lt;p&gt;&lt;code&gt;??entry::[array(xs:integer)+]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to select all entries where the value is an array of integers.&lt;/p&gt;
&lt;p&gt;Finally, responding to issue #341, I propose that lookup operators should be error free: rather than reporting errors, they should return nothing.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
