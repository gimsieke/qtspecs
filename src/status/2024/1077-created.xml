<item>
   <title>Pull request #1077 created</title>
   <pubDate>2024-03-13T12:50:14Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/pull/1077</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1077</guid>
   <description>&lt;div&gt;&lt;p&gt;Correct the status of new language features&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This PR corrects the status of certain language features that the change appendix in the spec incorrectly describes as having not been accepted by the WG., The features in question are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rules for reporting type errors during static analysis have been changed
so that a processor has more freedom to report errors in respect of constructs that
are evidently wrong, such as &lt;code&gt;@price/@value&lt;/code&gt;, even though dynamic evaluation
is defined to return an empty sequence rather than an error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This change has in fact been discussed and accepted by the group.  See PRs #603 and #884.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Record types are added as a new kind of ItemType, constraining
  the value space of maps.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Record types have become a fundamental feature of much of our work, with many additional capabilities relying on them. They became an official part of the spec with the closure of issue #172.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;Local union types are added as a new kind of ItemType, constraining
  the value space of atomic values.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Enumeration types are added as a new kind of &lt;code&gt;ItemType&lt;/code&gt;, constraining
the value space of strings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Local union types and enumeration types became an official part of the spec with the acceptance of PR #691&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The lookup operator &lt;code&gt;?&lt;/code&gt; can now be followed by a string literal, for cases where
map keys are strings other than NCNames.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;These changes were endorsed by acceptance of PR #926.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The rules for value comparisons when comparing values of different types (for example, decimal and double)
have changed to be transitive. A decimal value is no longer converted to double, instead the double is converted
to a decimal without loss of precision. This may affect compatibility in edge cases involving comparison of
values that are numerically very close.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We still have open issues regarding comparison, conversion, and promotion of numeric values. See for example issue #986. So we may yet decide to roll back these changes. For practical purposes it's sensible to treat the current text as status quo, since so many individual changes have been made that unwinding can only be treated as a new issue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;for member&lt;/code&gt; clause is added to FLWOR expressions to allow iteration over
an array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The current specification of &lt;code&gt;for member&lt;/code&gt; results from the acceptance of PR #752.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
