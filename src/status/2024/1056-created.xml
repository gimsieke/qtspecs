<item>
   <title>Issue #1056 created</title>
   <pubDate>2024-03-01T13:53:47Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1056</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1056</guid>
   <description>&lt;div&gt;&lt;p&gt;Simplifying match templates&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I like match templates a lot, I think they are a USP for XSLT, but I find using them quite clumsy e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;priority rules are quite subtle (I couldn't tell you what they are not, and I tend to make them explicit)&lt;/li&gt;
&lt;li&gt;because each match sits in a different template they tend to sort of drift around in the spaghetti of the code&lt;/li&gt;
&lt;li&gt;they don't naturally extend to nested local matches....everything exists at the top level.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you compare this with main stream functional match expressions then they are quite syntactically different, and I think the mainstream syntax is probably a bit simpler (and much more familiar)
(I can see this potentially extending to lots of subsequent things but I'll keep it to the headline)&lt;/p&gt;
&lt;p&gt;I think something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:template mode="foo" as="xs:string"&amp;gt;
    &amp;lt;xsl:match select="Foo"&amp;gt;
        &amp;lt;xsl:sequence select="'this is a foo'"/&amp;gt;
    &amp;lt;/xsl:match&amp;gt;
    &amp;lt;xsl:match select="Bar"&amp;gt;
        &amp;lt;xsl:sequence select="'this is a bar'"/&amp;gt;
    &amp;lt;/xsl:match&amp;gt;
    &amp;lt;xsl:match&amp;gt;
        &amp;lt;xsl:sequence select="'this is something else'"/&amp;gt;
    &amp;lt;/xsl:match&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;templates are matched in sequence (as is the norm), no opaque priority rules&lt;/li&gt;
&lt;li&gt;if nothing is matched then nothing is returned...I have effectively a catchall match above.&lt;/li&gt;
&lt;li&gt;everything is cohesive, the template contains all matches....no secret ones hidden at the bottom of the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there's lots of holes here,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how does this interact with existing match templates?&lt;/li&gt;
&lt;li&gt;are the a different syntax for the same thing?&lt;/li&gt;
&lt;li&gt;how do they work with includes and imports?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;my guesses are...they ARE just different syntax for the existing infrastructure...because thats the smallest change.
and then the other questions are answered by how the above syntax maps into "priority" but tbh, as I barely know how the current priority rules work, I can't really give a sensible guess.&lt;/p&gt;
&lt;p&gt;tbh, if this is just different syntax then secret matches CAN exist elsewhere in the spaghetti, but at least the programmer does have a construct to not do that, rather than the default contract to lack cohesion from the outset.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
