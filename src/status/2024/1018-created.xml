<item>
   <title>Issue #1018 created</title>
   <pubDate>2024-02-11T07:01:28Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1018</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1018</guid>
   <description>&lt;div&gt;&lt;p&gt;Output of parse-csv()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose making some simplifications to the output of parse-csv() to make it more amenable to processing.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Represent each row as a map, rather than as a structure with a data field and an accessor function. Note that implementations worried about memory usage can devise a custom map implementation optimised for the case where many maps have the same regular structure. (cf recent thread about Javascript "shapes")&lt;/li&gt;
&lt;li&gt;The key for a field in this map should be an integer if (i) column-names is set to false, or (ii) the column in question does not have a unique header name; in other cases it should be the name from the header.&lt;/li&gt;
&lt;li&gt;Replace the top-level &lt;code&gt;columns&lt;/code&gt; record with a simple array of field names. It's easy enough to map names to positions using index-of.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I also propose changing the name to &lt;code&gt;csv-to-maps&lt;/code&gt; for consistency with &lt;code&gt;csv-to-table&lt;/code&gt; and &lt;code&gt;csv-to-arrays&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We should advocate use of csv-to-arrays where data is to be accessed positionally, and csv-to-maps where it is to be accessed by column names, and optimise the design accordingly.&lt;/p&gt;
&lt;p&gt;Looking at a use case, the first example (ยง15.4.7.1) would be unnecessary if as proposed we change csv-to-xml to generate XHTML directly, But if it were needed, it would change from&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $csv := fn:parse-csv(`name,city{$crlf}Bob,Berlin`)
return &amp;lt;table&amp;gt;
   &amp;lt;thead&amp;gt;{
      for $column in $csv?columns?fields
         return &amp;lt;th&amp;gt;{ $column }&amp;lt;/th&amp;gt;
   }&amp;lt;/thead&amp;gt;
   &amp;lt;tbody&amp;gt;{
      for $row in $csv?rows return &amp;lt;tr&amp;gt;
         { for $field in $row?fields return &amp;lt;td&amp;gt;{ $field }&amp;lt;/td&amp;gt; }
      &amp;lt;/tr&amp;gt;
   }&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $csv := fn:parse-csv(`name,city{$crlf}Bob,Berlin`)
return &amp;lt;table&amp;gt;
   &amp;lt;thead&amp;gt;{
      for $column in $csv?columns
         return &amp;lt;th&amp;gt;{ $column }&amp;lt;/th&amp;gt;
   }&amp;lt;/thead&amp;gt;
   &amp;lt;tbody&amp;gt;{
      for $row in $csv?rows return &amp;lt;tr&amp;gt;
         { for $column in $csv?columns return &amp;lt;td&amp;gt;{ $row?$column }&amp;lt;/td&amp;gt; }
      &amp;lt;/tr&amp;gt;
   }&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
