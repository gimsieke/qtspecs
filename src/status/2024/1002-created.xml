<item>
   <title>Issue #1002 created</title>
   <pubDate>2024-02-06T10:10:22Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1002</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1002</guid>
   <description>&lt;div&gt;&lt;p&gt;Reinstate subsequence-before&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;There's a question on StackOverflow today:&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/77944304/&lt;/p&gt;
&lt;p&gt;that makes me think dropping &lt;code&gt;subsequence-before&lt;/code&gt; might have been a mistake (the replacement, &lt;code&gt;subsequence-where&lt;/code&gt;, doesn't allow the end condition to be exclusive).&lt;/p&gt;
&lt;p&gt;The question is how to find all the consecutive &lt;code&gt;list&lt;/code&gt; elements that follow a given &lt;code&gt;para&lt;/code&gt; element. That would be solved with &lt;code&gt;subsequence-before(following-sibling::*, fn{not(self::list)})&lt;/code&gt;. Doing it with &lt;code&gt;subsequence-where&lt;/code&gt; is much harder - you need to drop the final element in the result if it is not a &lt;code&gt;list&lt;/code&gt; element, while also taking into account that the result might be empty.&lt;/p&gt;
&lt;p&gt;I would like to propose reinstating subsequence-before; or perhaps inverting the predicate and naming it &lt;code&gt;subsequence-while()&lt;/code&gt;, so it becomes &lt;code&gt;subsequence-while(following-sibling::*, fn{self::list})&lt;/code&gt; assuming we accept the proposal in issue #919 to allow a callback predicate to use EBV.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
