<item>
   <title>Issue #1050 created</title>
   <pubDate>2024-02-28T16:02:13Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1050</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1050</guid>
   <description>&lt;div&gt;&lt;p&gt;Potential (low-risk) Ambiguities in XPath EBNF&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After demonstrating &lt;code&gt;iXML&lt;/code&gt; XPath grammar production at the meeting of 27th Feburary, it seemed worth recording some of the ambiguity issues encountered, if only so others might be aware of possible pitfalls.&lt;/p&gt;
&lt;p&gt;Please note that the &lt;a href="https://qt4cg.org/specifications/xquery-40/xpath-40.html#lexical-structure"&gt;Lexical Structure&lt;/a&gt; notes in the spec &lt;em&gt;do&lt;/em&gt; resolve these ambiguities, by extra-grammatical interpretations, most notably the choice of &lt;em&gt;longest conforming match&lt;/em&gt;, but for grammar/parsers which don't specify or support this, such as &lt;a href="https://invisiblexml.org/"&gt;InvisibleXML&lt;/a&gt;, ambiguities might arise, though there may be ameliorating changes to the resulting grammar that will resolve them. &lt;strong&gt;I am not advocating changes to the specification EBNF&lt;/strong&gt;  but merely noting where such problems might occur from my implementation experience, and potentially suggesting some workarounds.&lt;/p&gt;
&lt;p&gt;Here are a couple of cases:&lt;/p&gt;
&lt;h3&gt;TypeName / AtomicOrUnionType&lt;/h3&gt;
&lt;p&gt;The rule for &lt;code&gt;ItemType &lt;/code&gt;is ~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ItemType ::= ... TypeName| .... | AtomicOrUnionType |  ... &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where both &lt;code&gt;TypeName &lt;/code&gt;and &lt;code&gt;AtomicOrUnionType&lt;/code&gt; resolve solely to the &lt;code&gt;EQName &lt;/code&gt;production. The grammar interpretation notes suggests (I think) that it binds to &lt;code&gt;TypeName&lt;/code&gt; if such exists in the current static context, which is an extra-grammatical concept, but I may be mistaken.&lt;/p&gt;
&lt;h3&gt;StringTemplate&lt;/h3&gt;
&lt;p&gt;The productions for StringTemplate are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[106]   	StringTemplate	             ::=   	"`" (StringTemplateFixedPart | StringTemplateVariablePart)* "`"	
[107]   	StringTemplateFixedPart	     ::=   	((Char - ('{' | '}' | '`')) | "{{" | "}}" | "``")*
[108]   	StringTemplateVariablePart   ::=   	EnclosedExpr 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where it relies on &lt;em&gt;longest match&lt;/em&gt; semantics to avoid ambiguity. (If this was not the case a potential infinity of empty  &lt;code&gt;StringTemplateFixedPart&lt;/code&gt; productions could be satisfied, or any sequential partitions of a sequence of characters.)&lt;/p&gt;
&lt;p&gt;An alternative (recursive and more cumbersome) formulation, which avoids the ambiguity is (in an iXML grammar for compactness):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;               StringTemplate: -"`", StringTemplateContent?, -"`".
       -StringTemplateContent: StringTemplateFixedPart |
                               StringTemplateVariablePart |
                               StringTemplateVariablePart, StringTemplateContent |
                               StringTemplateFixedPart, StringTemplateVariablePart, StringTemplateContent?.
      StringTemplateFixedPart: ("{{"; "}}"; "``"; ~["`{}"])+.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;StringTemplateVariablePart&lt;/code&gt; remains unchanged. (iXML doesn't support character set subtraction, so &lt;code&gt;~["``{}"]&lt;/code&gt; (&lt;em&gt;any character except...&lt;/em&gt;) is used for the &lt;code&gt;Char -  ....&lt;/code&gt; term.) By allowing a fixed part only to be followed by a variable part, this effectively permits the content either to be empty, or a sequence of parts such that &lt;code&gt;StringTemplateVariablePart&lt;/code&gt; terms can be consecutive, but not &lt;code&gt;StringTemplateFixedPart&lt;/code&gt; and it seems to work effectively, at least in my iXML parser.&lt;/p&gt;
&lt;p&gt;Reactions, corrections, remarks, praise and brickbats welcome.
I'll document any more as I find them.
John&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
