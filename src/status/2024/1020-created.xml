<item>
   <title>Issue #1020 created</title>
   <pubDate>2024-02-11T23:56:50Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1020</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1020</guid>
   <description>&lt;div&gt;&lt;p&gt;When to apply the coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The rules for function calling say that the coercion rules are applied to the values supplied as function arguments; they are also applied in other circumstances such as when binding values to variables. The coercion rules are applied (as far as the spec is concerned) whether or not the supplied value already matches the required type.&lt;/p&gt;
&lt;p&gt;Saxon has always attempted to optimise this process: if the supplied value is already an instance of the required type, no coercion takes place.&lt;/p&gt;
&lt;p&gt;I have discovered at least one case where this assumption is incorrect: the coercion rules are not idempotent in the case where the supplied value matches the required type. This case concerns function coercion, exemplified by the new test case FunctionCall-058: if the expected type of a callback parameter is &lt;code&gt;function(xs:integer) as xs:boolean&lt;/code&gt;, and the supplied value for the callback is a function that accepts &lt;code&gt;xs:decimal&lt;/code&gt;, then the coercion rules say that a call to the supplied function that supplies an &lt;code&gt;xs:decimal&lt;/code&gt; must be rejected as a type error even though the supplied function accepts it.&lt;/p&gt;
&lt;p&gt;Note that this means we have introduced a rather subtle backwards incompatibility. In XQuery 3.1, coercion was not applied to variable bindings, so the following would work (the supplied function matches the declared type of the variable):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare variable $f as function(xs:integer) as xs:boolean 
              := function($x as item()) as xs:boolean {string($x)};
return $f("banana");
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(see new tests VarDecl065/066)&lt;/p&gt;
&lt;p&gt;In 4.0 I believe this is supposed to throw a type error, because the supplied function is wrapped in a wrapper function that checks that the supplied argument is an integer.&lt;/p&gt;
&lt;p&gt;We have extended the coercion rules considerably in 4.0, and we need to be confident that there are no other similar cases where the coercion rules are no longer idempotent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
