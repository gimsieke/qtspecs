<item>
   <title>Issue #948 created</title>
   <pubDate>2024-01-15T18:59:21Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/948</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-948</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:scan-left and fn:scan-right - produce accumulation of results&lt;/p&gt;&lt;div class="markup"&gt;&lt;h1&gt;fn:scan-left and fn:scan-right - produce accumulation of results&lt;/h1&gt;
&lt;p&gt;In XPath 4.0 so far we still don't have a convenient way to express the functionality of producing a series of accumulated (accrued) results when applying a folding function over a collection (sequence, array, ...) of items. The general use-case for this is the task to produce a sequence of running totals when applying an operation over a sequence of data points: &lt;strong&gt;produce the partial sums of loan payments&lt;/strong&gt; over fixed periods, &lt;strong&gt;produce the compounded amounts  of a deposit&lt;/strong&gt; with fixed interest rate over years, ..., etc.&lt;/p&gt;
&lt;p&gt;Two functions (shamelessly borrowed from Haskell):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fn:scan-left&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fn:scan-right&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr/&gt;
&lt;h2&gt;fn:scan-left&lt;/h2&gt;
&lt;p&gt;This function has a similar signature to that of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-left&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; and produces the same final result, however it produces the complete (ordered) sequence of all partial results from every new value the accumulator gets during the evaluation of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-left&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:scan-left($input	as item()*,	
             $zero	as item()*,	
             $action	as function(item()*, item()) as item()*	
) as array(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The function is equivalent to the following implementation in XPath(return clause added for completeness):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $scan-left-inner := function($seq as item()*, 
                                 $zero as item(), 
                                 $fun as function(item()*, item()) as item()*,
                                 $self as function(*)
                               ) as array(*)*                               
{
  let $result := [$zero]
   return
     if(empty($seq)) then $result
       else
         (
           $result, $self(tail($seq), $fun($zero, head($seq)), $fun, $self)  
         )
},

$scan-left := function($seq as item()*, 
                       $zero as item(), 
                       $fun as function(item()*, item()) as item()*
                     ) as array(*)*  
{
  $scan-left-inner($seq, $zero, $fun, $scan-left-inner)
}  

  return
    $scan-left(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples:&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; $scan-left(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[0]
[1]
[3]
[6]
[10]
[15]
[21]
[28]
[36]
[45]
[55]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/603c0584-31bb-431f-b928-875058111128" alt="image"/&gt;&lt;/p&gt;
&lt;h2&gt;fn:scan-right&lt;/h2&gt;
&lt;p&gt;This function has a similar signature to that of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-right&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; and produces the same final result, however it produces the complete (ordered) sequence of all partial results from every new value the accumulator gets during the evaluation of &lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:fold-right&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Signature&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;fn:scan-right($input	as item()*,	
              $zero	as item()*,	
              $action	as function(item()*, item()) as item()*	
) as array(*)*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Properties&lt;/h3&gt;
&lt;p&gt;This function is &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-deterministic"&gt;·deterministic·&lt;/a&gt;, &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-context-independent"&gt;·context-independent·&lt;/a&gt;, and &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#dt-focus-independent"&gt;·focus-independent·&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Rules&lt;/h3&gt;
&lt;p&gt;The function is equivalent to the following implementation in XPath(return clause added for completeness):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let  $scan-right-inner := function($seq as item()*,
                                   $zero as item()*,
                                   $f as function(item(), item()*) as item()*,                          
                                   $self as function(*)
                                  ) as array(*)*
{
    if(empty($seq)) then [$zero]
      else
        let $rightResult := $self(tail($seq), $zero, $f, $self)
         return
            ([$f(head($seq), head($rightResult))], $rightResult)
},

$scan-right := function($seq as item()*,
                        $zero as item()*,
                        $f as function(item(), item()*) as item()*
                       ) as array(*)*
{
  $scan-right-inner($seq, $zero, $f, $scan-right-inner)
}   

return
  $scan-right(1 to 10, 0, op('+'))  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Examples:&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt; $scan-right(1 to 10, 0, op('+'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;[55]
[54]
[52]
[49]
[45]
[40]
[34]
[27]
[19]
[10]
[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://github.com/qt4cg/qtspecs/assets/10605892/68f5010d-133d-4bcf-8096-609a3d26697f" alt="image"/&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
