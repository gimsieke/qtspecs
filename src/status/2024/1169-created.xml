<item>
   <title>Issue #1169 created</title>
   <pubDate>2024-04-24T06:35:25Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1169</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1169</guid>
   <description>&lt;div&gt;&lt;p&gt;Maps &amp;amp; Arrays: Consistency &amp;amp; Terminology&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;After the introduction of #1094 and #1159, and before adding more map/array operations, I think it’s time to get more serious about consistency and terminology. The current drafts employ a variety of terms that are not clearly defined, or separated from each other. We now have at least…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;items, members, pairs, keys, values, entries&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;…which are sometimes used for maps, for arrays, or for both data structures. A first attempt to clean up, with reducing the overall effort:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A minor one: The modifier for lookups should be in singular form, analagous to node axes: &lt;code&gt;item&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;pair&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While I first advocated the orthogonality principle for axes in lookup expressions, I now think we should stick to the existing terminology. Otherwise, we would need to revise many other existing parts of the spec. My suggestion would be to:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;introduce &lt;code&gt;member&lt;/code&gt; for arrays&lt;/li&gt;
&lt;li&gt;only allow &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;pair&lt;/code&gt; for maps&lt;/li&gt;
&lt;li&gt;allow &lt;code&gt;items&lt;/code&gt; for both maps and arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This would make it symmetric with a) the current terminology for maps and arrays, and b) enhanced &lt;code&gt;for&lt;/code&gt; clauses, i.e. &lt;code&gt;for member $m&lt;/code&gt; and &lt;code&gt;for key $k value $v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The reverse approach would be to drop &lt;code&gt;for member $m&lt;/code&gt; and to also allow &lt;code&gt;for key $k value $v&lt;/code&gt; for arrays (with &lt;code&gt;for value&lt;/code&gt; replacing &lt;code&gt;for member&lt;/code&gt;). In addition, we could have &lt;code&gt;for pair&lt;/code&gt;.&lt;/p&gt;
&lt;ol start="3"&gt;
&lt;li&gt;
&lt;p&gt;With the introduction of the &lt;code&gt;item&lt;/code&gt; axis, &lt;code&gt;map:values&lt;/code&gt; and &lt;code&gt;arrays:values&lt;/code&gt; should be renamed to &lt;code&gt;map:items&lt;/code&gt; and &lt;code&gt;array:items&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I would suggest dropping &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt;. The names don’t imply we’ll deal with records, and it’s not in line with &lt;code&gt;for member $m&lt;/code&gt; either. If we want to keep these functions, we could rename them to &lt;code&gt;array:pairs&lt;/code&gt; and &lt;code&gt;array:of-pairs&lt;/code&gt; and add the integer positions as keys, and we should introduce and consistently use the term &lt;code&gt;pair&lt;/code&gt; for maps and arrays.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Closely related: #826&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
