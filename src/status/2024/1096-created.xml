<item>
   <title>Issue #1096 created</title>
   <pubDate>2024-03-18T15:36:36Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/1096</link>
   <guid>https://qt4cg.org/@qt4cg/2024/#created-1096</guid>
   <description>&lt;div&gt;&lt;p&gt;Effect of atomization on array:index-of()&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;What is the expected result of the expression:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:index-of( [[1,2], [3,4]],  [3,4] )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It seems that the second argument is atomised (because its declared type is atomic), but the first argument is not.&lt;/p&gt;
&lt;p&gt;So both members of the array have count=1, whereas $search has count=2, so nothing matches, so the result is ().&lt;/p&gt;
&lt;p&gt;Now, what if we write:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;array:index-of( [[1,2], (3,4)],  [3,4] )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This time it seems that the second member of the array matches, so the result is 2.&lt;/p&gt;
&lt;p&gt;This doesn't feel right. One solution would be to say that each member of the array is itself atomised. But that seems to lead to other surprises with other examples of nested arrays.&lt;/p&gt;
&lt;p&gt;An alternative would be to atomize neither argument (which would mean changing the function signature). But then we would need to use a different comparison operation.&lt;/p&gt;
&lt;p&gt;We seem to be back where we started -- I was unhappy about introducing this function because of the difficulty of defining a good comparison operation for it to use.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
