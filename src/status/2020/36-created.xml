<item>
   <title>Issue #36 created</title>
   <pubDate>2020-12-21T11:31:20Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/36</link>
   <guid>https://qt4cg.org/@qt4cg/2020/#created-36</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:function-annotations (Allow support for user-defined annotations)&lt;/p&gt;&lt;div class="markup"&gt;&lt;h3&gt;Requirements/Use Cases&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;It should be possible for a library or application written in XQuery to define, access, and use custom annotations without relying on vendor extensions.&lt;/li&gt;
&lt;li&gt;It should be possible for a processor or editor/IDE to check and verify user-defined annotation usage (can an annotation be used multiple times; what argument values/types are valid) to provide better validation for custom annotations.&lt;/li&gt;
&lt;li&gt;It should be possible to access the details of the annotations on a function (name, argument values) so tools like xqDoc can read and format annotations without using vendor extensions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Annotation Declarations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;An annotation declaration is a function declared using the &lt;code&gt;%annotation&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Annotation parameters must be a SequenceType that has an ItemType which is either a) a subtype of &lt;code&gt;union(xs:string, xs:double, xs:float, xs:decimal)*&lt;/code&gt;, or b) &lt;code&gt;item()&lt;/code&gt; (to denote any permitted literal value). &lt;strong&gt;Note:&lt;/strong&gt; This is because annotation values are restricted to literal values. &lt;strong&gt;Note:&lt;/strong&gt; It is therefore possible to use an EnumerationType to define a set of allowed string values (e.g. "yes" and "no").&lt;/li&gt;
&lt;li&gt;If a function annotation name matches an annotation declaration in the statically-known functions using the function name resolver, it is verified using the same rules for static function calls; if there are no matching annotation declarations, then no error is issued, although an implementation may choose to issue a warning.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Annotation Tests&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A new AnnotationTest (&lt;code&gt;annotation(...)&lt;/code&gt;) SequenceType is provided with the same structure and semantics as a FunctionTest.&lt;/li&gt;
&lt;li&gt;AnnotationTest parameters must be a SequenceType that has an ItemType which is either a) a subtype of &lt;code&gt;union(xs:string, xs:double, xs:float, xs:decimal)*&lt;/code&gt;, or b) &lt;code&gt;item()&lt;/code&gt; (to denote any permitted literal value). &lt;strong&gt;Note:&lt;/strong&gt; This is because annotation values are restricted to literal values. &lt;strong&gt;Note:&lt;/strong&gt; It is therefore possible to use an EnumerationType to define a set of allowed string values (e.g. "yes" and "no").&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;fn:annotations&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotations($f as function(*)) as annotation(*)*&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns all the annotations on the function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;annotation&lt;/code&gt; signature will match the signature of the annotation, so &lt;code&gt;%a(1, 2)&lt;/code&gt; will have the &lt;code&gt;annotation(xs:integer, xs:integer)&lt;/code&gt; annotation type.&lt;/p&gt;
&lt;p&gt;If a function has multiple annotations with the same signature (e.g. &lt;code&gt;%values(1) %count(2)&lt;/code&gt;) then two annotations will be returned with the same signature, referring to the different annotations.&lt;/p&gt;
&lt;h3&gt;fn:annotation&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotation($f as function(*), $name as xs:QName) as annotation(*)*&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns all the annotations on the function with the name &lt;code&gt;$name&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;annotation&lt;/code&gt; signature will match the signature of the annotation, so &lt;code&gt;%a(1, 2)&lt;/code&gt; will have the &lt;code&gt;annotation(xs:integer, xs:integer)&lt;/code&gt; annotation type.&lt;/p&gt;
&lt;p&gt;If a function has multiple annotations with the same name and signature (e.g. &lt;code&gt;%values(1) %values(2)&lt;/code&gt;) then two annotations will be returned with the same signature, referring to the different annotations.&lt;/p&gt;
&lt;h3&gt;fn:annotation-name&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotation-name($annotation as annotation(*)) as xs:QName&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns the name of the annotation.&lt;/p&gt;
&lt;h3&gt;fn:annotation-arguments&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;fn:annotation-arguments($annotation as annotation(*)) as array(*)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returns the arguments passed to the associated annotation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
