<item>
   <title>Issue #826 created</title>
   <pubDate>2023-11-09T14:03:11Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/826</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-826</guid>
   <description>&lt;div&gt;&lt;p&gt;Arrays: Representation of single members of an array&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When introducing the new array features to some users, the &lt;code&gt;for member&lt;/code&gt; syntax was welcomed by everyone.&lt;/p&gt;
&lt;p&gt;However, there was some confusion (again, see my past &lt;a href="https://lists.w3.org/Archives/Public/public-xslt-40/2023Jun/0026.html"&gt;feedback to the mailing list&lt;/a&gt;) about what the QT4 group considers to be “members of an array”, and about value records.&lt;/p&gt;
&lt;p&gt;In particular, the “value record” representation of arrays led to questions that I didn’t have a good answer for. In particular, people didn’t understand why an array member was returned as a map, and why that map is (again) called “array member” or “value record” – a term no one associated with arrays (at least for now… which somewhat is not surprising, as it has just been introduced).&lt;/p&gt;
&lt;p&gt;Next, due to atomization (as mentioned before), &lt;code&gt;array:split&lt;/code&gt; allows us to omit the explicit &lt;code&gt;?value&lt;/code&gt; lookups that are required for &lt;code&gt;array:members&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;sum(array:members($array)?value)
sum(array:split($array))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suppose I have been biased in my presentation, but I’ve failed to give good arguments to justify the current solution in the spec. The questions that I think need to be answered are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How will people benefit from the (usually intermediate) map representation for array members?&lt;/li&gt;
&lt;li&gt;What exactly do we win with &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt; instead of using the existing &lt;code&gt;array:join&lt;/code&gt; function, combined with the new &lt;code&gt;array:split&lt;/code&gt; function?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Out of interest, I have rewritten the formal equivalencies for the array functions with &lt;code&gt;array:split&lt;/code&gt;/&lt;code&gt;array:join&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:append&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members((array:members($array), map{'value':$member}))&lt;/code&gt;
&lt;code&gt;array:join((array:split($array), array { $member }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:build&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members($input ! map { 'value': $action(.) })&lt;/code&gt;
&lt;code&gt;array:join($input ! array { $action(.) })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:filter&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; filter(function($m) { $predicate($m?value) })&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; filter(function($m) { $predicate($m?*) })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:for-each&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) ! map { 'value': $action(?value) })&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) ! array { $action(?*) })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:for-each-pair&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;array:of-members(
  for-each-pair(array:members($array1), 
    array:members($array2), 
    function($m, $n) {map{'value': $action($m?value, $n?value)}}))
array:join(
  for-each-pair(array:split($array1), array:split($array2),
    function($m, $n) { array { $action($m?*, $n?*) } }))
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:insert-before&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; insert-before($position, map{'value':$member}))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; insert-before($position, array { $member }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:remove&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; remove($positions))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; remove($positions))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:reverse&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; reverse())&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; reverse())&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:slice&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; slice($start, $end, $step))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; slice($start, $end, $step))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:split&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; sort($collation, function($x) { $key($x?value) }))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; sort($collation, function($x) { $key($x?*) }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array:subarray&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members(array:members($array) =&amp;gt; subsequence($start, $length))&lt;/code&gt;
&lt;code&gt;array:join(array:split($array) =&amp;gt; subsequence($start, $length))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array { $sequence }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:of-members($sequence ! map { 'value': . })&lt;/code&gt;
&lt;code&gt;array:join($sequence ! array { . })&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[E1, E2, E3, ..., En]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:join((map { 'value': E1 }, map { 'value': E2 }, map { 'value': E3 }, ... map { 'value': En }))&lt;/code&gt;
&lt;code&gt;array:join((array { E1 }, array { E2 }, array { E3 }, ... array { En }))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$array?*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:members($array) ! ?value&lt;/code&gt;
&lt;code&gt;array:split($array) ! ?*&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$array?$N / $array($N)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;array:members($array)[$N]?value&lt;/code&gt;
&lt;code&gt;array:split($array)[$N]?*&lt;/code&gt;  (or &lt;code&gt;array:get($array, $N)&lt;/code&gt;)&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;As a side note, I noticed that the equivalence given for &lt;code&gt;array:join&lt;/code&gt; must be buggy:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: current equivalence presented in the spec :)
array:of-members($arrays ! array:members(.))

(: returns [ 1, 2, 3 ] :)
let $arrays := ([ 1 ], [ 2, 3 ])
return array:of-members($arrays ! array:members(.))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concluding, If I could choose, I would tend to drop &lt;code&gt;array:members&lt;/code&gt; and &lt;code&gt;array:of-members&lt;/code&gt; and rename &lt;code&gt;array:split&lt;/code&gt; to &lt;code&gt;array:members&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
