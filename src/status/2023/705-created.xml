<item>
   <title>Issue #705 created</title>
   <pubDate>2023-09-15T07:08:45Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/705</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-705</guid>
   <description>&lt;div&gt;&lt;p&gt;Function Coercion: Function Arities&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-function-coercion"&gt;4.6.4 Function Coercion&lt;/a&gt;, a rule was added to support functions with an arity lower than the expected one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If F has lower arity than the expected type, then F is wrapped in a new function that declares and ignores the additional argument; the following steps are then applied to this new function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If I got it right, this is the resulting 4.0 behavior:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spoiler:&lt;/strong&gt; I probably got it wrong, see the next comment.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare function local:function($a) { };
declare variable $function := function($a) { };

(: now legal :)
filter    (1984, true#0)
$function (1984, 'ignored')
fn { }    (1984, 'ignored')
map { }   (1984, 'ignored')
true#0    ('ignored')
sum(?, ())(1984, 'ignored')

(: still illegal :)
local:function(1984, 'ignored')

(: still legal: RHS items will be supplied one by one :)
map { }(1984, 'processed')     
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe some more examples should be added in the corresponding sections that refer to function coercion.&lt;/p&gt;
&lt;p&gt;The new rule is powerful and allows for greater flexibility (see #516 and other issues), but the behavior may also be unexpected. We should probably document that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It may go unnoticed that a passed on argument will be ignored. In other words, we reduce type safety by allowing users to supply more arguments than will be processed.&lt;/li&gt;
&lt;li&gt;It makes a difference whether the invoked function is static or dynamic (dynamic functions will now provide less type safety than static functions).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
