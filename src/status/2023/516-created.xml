<item>
   <title>Issue #516 created</title>
   <pubDate>2023-05-20T18:12:06Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/516</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-516</guid>
   <description>&lt;div&gt;&lt;p&gt;Add position argument to HOF callbacks&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;The coercion rules now allow a supplied function item to have lower arity than the signature of the declared type; the effect is that the information supplied in the additional arguments is ignored.&lt;/p&gt;
&lt;p&gt;One of the intended use cases for this was to allow existing higher-order functions to be extended while retaining backwards compatibility. For example, in &lt;code&gt;fn:filter&lt;/code&gt;, we can change the required type of the predicate function from &lt;code&gt;function(item()) as xs:boolean&lt;/code&gt; to &lt;code&gt;function(item(), xs:positiveInteger) as xs:boolean&lt;/code&gt;, with the second argument supplying the position of the item being tested. A function that isn't interested in the position can just ignore it, so existing calls will continue to work.&lt;/p&gt;
&lt;p&gt;I propose that we add a position argument to the callbacks for:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:filter
fn:for-each
fn:for-each-pair
fn:partition
fn:items-after
fn:items-before
fn:items-starting-where
fn:items-ending-where
array:filter
array:for-each
array:for-each-pair
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other candidates include&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fn:all
fn:some
fn:index-where
array:index-where
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but I suggest we leave these unless someone can think of a use case.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
