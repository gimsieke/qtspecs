<item>
   <title>Issue #866 created</title>
   <pubDate>2023-12-03T13:19:13Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/866</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-866</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort, and XSLT and XQuery sorting, should use transitive comparisons&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We have addressed the question of non-transitivity of equality matching in &lt;code&gt;distinct-values()&lt;/code&gt;, and in XSLT and XQuery grouping, but the same issue exists for sorting. Currently &lt;code&gt;fn:sort&lt;/code&gt;, as well as XSLT and XQuery sorting, rely on the "lt" operator for comparing values including mixed numerics such as doubles and decimals. Because this promotes to double, it is capable of losing precision, and is therefore non-transitive. Most sort algorithms rely on the supplied comparison function being transitive, and if it isn't, then undefined failures may occur including non-termination.&lt;/p&gt;
&lt;p&gt;One particular quirk (which led me here) is that &lt;code&gt;fn:highest&lt;/code&gt; and &lt;code&gt;fn:lowest&lt;/code&gt; start by using &lt;code&gt;fn:sort&lt;/code&gt; semantics to put the values in order, and then rely on &lt;code&gt;fn:deep-equal&lt;/code&gt; semantics to find the values that are "equal highest" or "equal lowest". But &lt;code&gt;fn:sort&lt;/code&gt; and &lt;code&gt;fn:deep-equal&lt;/code&gt; have different ways of deciding whether two values are equal: decimal 1.2 and double 1.2 are equal for &lt;code&gt;fn:sort&lt;/code&gt;, but not for &lt;code&gt;fn:deep-equal&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
