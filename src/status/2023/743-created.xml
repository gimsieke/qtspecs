<item>
   <title>Issue #743 created</title>
   <pubDate>2023-10-10T23:33:06Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/743</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-743</guid>
   <description>&lt;div&gt;&lt;p&gt;Extend enumeration types to allow values other than strings&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;In reviewing and accepting the spec for enumeration types, it was suggested that it might be useful to allow values other than strings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There's a difficulty in that not all atomic values can be represented by literals. We have the same problem with function annotations; perhaps we need to bite the bullet and define some kind of "constant atomic expression" construct.&lt;/li&gt;
&lt;li&gt;Aside from that, there don't seem to be any major obstacles.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We change&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An EnumerationType has a value space consisting of a set of xs:string values. When matching strings against an enumeration type, strings are always compared using the Unicode codepoint collation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An EnumerationType has a value space consisting of a set of atomic values. When matching values against an enumeration type, values are always compared using the fn:atomic-compare() function (as used for comparing map keys).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The subtyping rules (newly defined in terms of unions of singleton enumeration sets) seem to work in their current form, without change. &lt;code&gt;enum("red", "green")&lt;/code&gt; is still a subtype of &lt;code&gt;xs:string&lt;/code&gt;, because all the enumerated values are instances of &lt;code&gt;xs:string&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
