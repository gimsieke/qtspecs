<item>
   <title>Issue #757 created</title>
   <pubDate>2023-10-17T16:24:09Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/757</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-757</guid>
   <description>&lt;div&gt;&lt;p&gt;Function families&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We talked on the call today about the tension between defining multiple simple functions focussed on one task, and a small number of omnibus functions that have many different options.&lt;/p&gt;
&lt;p&gt;I think we would all agree that multiple simple functions would be the better choice except for the problem that they all end up going into a single global namespace. So the question becomes, how can we better partition the name-space (using the term deliberately with a hyphen).&lt;/p&gt;
&lt;p&gt;We're reluctant to use the namespace mechanism to partition our function library because namespaces are cumbersome and clutter the code with lots of boilerplate; declaring namespaces for binding function libraries also has side-effects for example on the semantics of element constructors.&lt;/p&gt;
&lt;p&gt;One approach would be to build on the idea that @dnovatchev presented of using maps containing anonymous functions, so for example &lt;code&gt;csv()?parse()&lt;/code&gt; would first call fn:csv() to load a family (or library) of functions, of which one is then selected for execution. This works, but I don't think it's a perfect solution; for example static analysis becomes a lot more difficult, and we don't get the benefits of default parameters and keyword arguments.&lt;/p&gt;
&lt;p&gt;Most languages use hierarchic names with "." as a separator. Although XML names allow "." as a regular character, none of our built-in function names currently use it as such. So it would be entirely possible to adopt a convention where names like csv.parse() etc are used to name functions in a function family referred to as "csv". This wouldn't by itself require any language changes.&lt;/p&gt;
&lt;p&gt;But if we adopted this convention, we could build on it to provide usability tweaks that make a large function library easier to manage. For example, we could put the math functions into the fn namespace with names like &lt;code&gt;fn:math.sin(x)&lt;/code&gt;, and then provide a way of binding a namespace prefix to a subtree of the fn namespace, so math:sin becomes a synonym for fn:math.sin(). The immediate benefit is that the namespace prefix doesn't need to be declared unless people want to use it. We could also then consider defining an algorithm for searching the fn namespace for abbreviated names such as sin(x), perhaps with some form of "import functions" declaration that says which subtrees of the fn namespace are to be searched.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
