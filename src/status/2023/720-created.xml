<item>
   <title>Issue #720 created</title>
   <pubDate>2023-09-25T09:47:50Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/720</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-720</guid>
   <description>&lt;div&gt;&lt;p&gt;From Records to Objects&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;It has become idiomatic to use maps, and record type definitions, to declare a collection of functions; so for example the random-number-generator object offers a "method" &lt;code&gt;next()&lt;/code&gt; that can be called using the syntax &lt;code&gt;$rng?next()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that it's not possible, within the XPath/XQuery language, to implement such a function with implicit access to the object on which it is invoked. The implementation of the function does not have access to any kind of &lt;code&gt;$this&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;This issue considers how we can move forwards from supporting simple records to introduce object capabilities, in an incremental and compatible way.&lt;/p&gt;
&lt;p&gt;Here are three steps in that direction:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Where a named record type is declared, also create a corresponding constructor function. So if you declare&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;declare item type my:loc as record(longitude as xs:double, latitude as xs:double)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;you also get a constructor function allowing my:loc(180, 180), allowing both positional or keyword arguments corresponding to the field names,&lt;/p&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;p&gt;Allow default values to be defined in the record type, which act as default values for the parameters in the constructor function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow functions that are defined as part of a record type access to a variable $this. The constructor function provides an implicit binding of this variable to the record/map/object that is being instantiated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow self-reference to a named record type (and its constructor function) within the record definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So you can now do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;declare type my:counter as record (
   value as xs:integer,
   increment := fn() as my:counter {my:counter($this?value + 1)}
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let $x := my:counter(0)
return $x?increment()?value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which returns 1.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
