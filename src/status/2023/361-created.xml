<item>
   <title>Issue #361 created</title>
   <pubDate>2023-02-20T11:38:00Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/361</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-361</guid>
   <description>&lt;div&gt;&lt;p&gt;Named arguments: $input vs. $value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;Great effort has been made in unifying the parameter names of the XQFO standard; thanks for that!&lt;/p&gt;
&lt;p&gt;I believe to remember that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$value&lt;/code&gt;, &lt;code&gt;$values&lt;/code&gt;, &lt;code&gt;$value1&lt;/code&gt;, etc. is used for atomic/atomized arguments, whereas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$input&lt;/code&gt;, &lt;code&gt;$input1&lt;/code&gt;, etc. is used for input, mostly of type &lt;code&gt;item()&lt;/code&gt;, that is processed unchanged.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$uri&lt;/code&gt; is used for arguments that could have been defined as items of type &lt;code&gt;xs:anyURI&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I believe the following argument names need to be double-checked (if not, It may be that I havenâ€™t fully grasped how the naming rules are supposed to work):&lt;/p&gt;
&lt;p&gt;Function | Currently | Presumably | Justification
--- | --- | --- | ---
&lt;code&gt;array:slice&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | &lt;code&gt;$array&lt;/code&gt; | Alignment with &lt;code&gt;array:size&lt;/code&gt; et al.
&lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | Argument is not atomized
&lt;code&gt;json&lt;/code&gt; | &lt;code&gt;$input&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Argument is atomized
&lt;code&gt;string&lt;/code&gt; | &lt;code&gt;$item&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt;  | &lt;code&gt;$item&lt;/code&gt; is used nowhere else
&lt;code&gt;expanded-QName&lt;/code&gt; | &lt;code&gt;$qname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;prefix-from-QName&lt;/code&gt; et al.
&lt;code&gt;resolve-QName&lt;/code&gt; | &lt;code&gt;$qname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;prefix-from-QName&lt;/code&gt; et al.
&lt;code&gt;parse-QName&lt;/code&gt; | &lt;code&gt;$eqname&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;parse-json&lt;/code&gt; | &lt;code&gt;$json&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;json-to-xml&lt;/code&gt; | &lt;code&gt;$json&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Alignment with &lt;code&gt;parse-xml&lt;/code&gt; et al.
&lt;code&gt;char&lt;/code&gt; | &lt;code&gt;$name&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | Input may also be codepoint values, etc.
&lt;code&gt;namespace-uri-for-prefix&lt;/code&gt; | &lt;code&gt;$prefix&lt;/code&gt; | &lt;code&gt;$value&lt;/code&gt; | &lt;code&gt;$prefix&lt;/code&gt; is used nowhere else
&lt;code&gt;resolve-uri&lt;/code&gt; | &lt;code&gt;$relative&lt;/code&gt; | &lt;code&gt;$uri&lt;/code&gt; | Absolute URIs are legal as well
&lt;code&gt;array:append&lt;/code&gt; | &lt;code&gt;$add&lt;/code&gt; | &lt;code&gt;$member&lt;/code&gt; | Alignment with &lt;code&gt;array:put&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And we should probably pay particular attention to the naming conventions when adding new functions.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
