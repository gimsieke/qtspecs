<item>
   <title>Issue #655 created</title>
   <pubDate>2023-08-09T07:30:59Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/655</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-655</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:sort-with: Comparators&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;See https://github.com/qt4cg/qtspecs/issues/93#issuecomment-1017937220:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One solution to more powerful sorting would a variant of fn:sort that uses a comparator function. We've resisted this in the past because we can't trust a user-supplied comparator function to be well behaved (e.g. transitive). I wonder how serious an obstacle this is?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We should try to trust; there are much more hidden pitfalls in the existing language.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fn:sort&lt;/code&gt; could be extended with a &lt;code&gt;comparator&lt;/code&gt; parameter with two arguments and returning &lt;code&gt;xs:boolean&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;(: returns John, Joe, Jim, Jack :)
sort(('Jack', 'Joe', 'Jim', 'John'), comparator := op('&amp;gt;'))

(: returns -1, 2, -3 :)
sort((-3, -1, 2), comparator := fn($a, $b) { abs($a) &amp;lt; abs($b) })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, if a comparator is supplied, other parameters (&lt;code&gt;collation(s)&lt;/code&gt;, &lt;code&gt;key(s)&lt;/code&gt;, &lt;code&gt;ascending&lt;/code&gt;, see #623) must not be specified in parallel.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
