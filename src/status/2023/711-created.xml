<item>
   <title>Issue #711 created</title>
   <pubDate>2023-09-19T09:22:59Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/711</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-711</guid>
   <description>&lt;div&gt;&lt;p&gt;Using annotations for navigation of JSON trees&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This issue develops ideas presented in issue #596, which itself is a continuation of ideas raised in issue #341, issue #350, and elsewhere. It's related to the requirements presented in issue #262 and issue #297.&lt;/p&gt;
&lt;p&gt;Firstly, I propose a change to the data model so that annotations can be attached to any item [or perhaps any value?], not only to a function. The annotations are a map of type &lt;code&gt;map{xs:QName, item()*}&lt;/code&gt;. Some general principles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annotations on an item do not affect the result of any operation on that item unless otherwise specified.&lt;/li&gt;
&lt;li&gt;Operations that are described as returning a result that contains items that are present in one of the operation's operands retain the annotations of those items, unless otherwise specified. (So for example $a[C] returns a sequence of items from $a in which the annotations are preserved).&lt;/li&gt;
&lt;li&gt;Operations that construct "new" items (for example $a + $b) return an item with no annotations, unless otherwise specified.&lt;/li&gt;
&lt;li&gt;The function &lt;code&gt;annotations($x)&lt;/code&gt; (replacing &lt;code&gt;function-annotations($x)&lt;/code&gt;) returns the annotations of an item.&lt;/li&gt;
&lt;li&gt;The function annotate($x, key, value) returns a "clone" of $x with an additional annotation. (A clone of an item differs from the original only in having different annotations. All operations other than annotation-sensitive operations produce exactly the same result on the clone and the original - including tests for node identity.)&lt;/li&gt;
&lt;li&gt;To avoid confusion, the term "type annotation" is replaced by "type label".&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Secondly, we use annotations to aid navigation of JTrees (a term I use to describe trees of arrays and maps such as might be produced by parsing JSON).&lt;/p&gt;
&lt;p&gt;We introduce a component of the static context &lt;code&gt;tracked=true|false&lt;/code&gt;, defaulting to false. The construct &lt;code&gt;tracked{expression}&lt;/code&gt; evaluates an expression and its subexpressions in tracked mode. In tracked mode any operator or function that performs selection within an array or map (for example the lookup operator, the &lt;code&gt;map:get&lt;/code&gt; and &lt;code&gt;array:get&lt;/code&gt; function, using the map/array as a function item, or the &lt;code&gt;array:head()&lt;/code&gt; and &lt;code&gt;array:foot()&lt;/code&gt; and &lt;code&gt;map:find()&lt;/code&gt; functions) annotates the items in its result with two properties: "container" whose value is the map or array from which the item was selected, and "key" which is the key or array index of the selected value within that container. The effect is that if an item was found in a JTree using a tracked expression, the annotations on the resulting item can be used in effect to navigate upwards within the tree that was searched.&lt;/p&gt;
&lt;p&gt;Note that this is not a new idea: in effect, the result of a tracked selection is a &lt;strong&gt;zipper&lt;/strong&gt; data structure, as described in https://en.wikipedia.org/wiki/Zipper_(data_structure).&lt;/p&gt;
&lt;p&gt;A further exploitation of the idea allows us to introduce deep update of JTree structures. For example, &lt;code&gt;modify(root:=$a, selection:=fn{?x?y?z,} change:=fn{.+1})&lt;/code&gt; can evaluate the &lt;code&gt;selection&lt;/code&gt; argument in tracked mode, apply the &lt;code&gt;change&lt;/code&gt; function to the resulting items, and then navigate back using the &lt;code&gt;container&lt;/code&gt; annotation to create modified versions of all traversed containing JTrees, eventually returning a modified version of the &lt;code&gt;root&lt;/code&gt; tree.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
