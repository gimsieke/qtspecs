<item>
   <title>Issue #911 created</title>
   <pubDate>2023-12-18T12:44:28Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/911</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-911</guid>
   <description>&lt;div&gt;&lt;p&gt;Type "Promotion" in the coercion rules&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I have an open action: QT4CG-052-06: MK to consider the editorial question of “promotion” for the symmetric relations.&lt;/p&gt;
&lt;p&gt;I think the point that led to this was the fact that the word "promotion" seems inappropriate for cases like (string/uri) where the implicit conversion can take place in either direction.&lt;/p&gt;
&lt;p&gt;I'd like to propose a fix to this that is not merely editorial. I propose that we allow any cast from one numeric type to another in the coercion rules. For example, if the required type is decimal, then a double or float can be supplied. Since, for many implementations of xs:decimal, this can be done losslessly, it makes at least as much sense to convert from double to decimal as from decimal to double.&lt;/p&gt;
&lt;p&gt;The word "promotion" is in fact used (in relation to the coercion rules) only in a table heading, and we can change this heading to "implicit casting".&lt;/p&gt;
&lt;p&gt;Appendix B.1 currently says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;B.1 Type Promotion&lt;/p&gt;
&lt;p&gt;[Definition: Under certain circumstances, an atomic value can be promoted from one type to another.] Type promotion is used in a number of contexts:&lt;/p&gt;
&lt;p&gt;It forms part of the process described by the [coercion rules], invoked for example when a value of one type is supplied as an argument of a function call where the required type of the corresponding function parameter is declared with a different type.
It forms part of the process described in [B.2 Operator Mapping]), which selects the implementation of a binary operator based on the types of the supplied operands.
It is invoked (by explicit reference) in a number of other situations, for example when computing an average of a sequence of numeric values (in the fn:avg function).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and I suggest we retain the term only for the second case, operator mapping. This differs from the coercion rules in that there are two operands and the effect is always to convert one to the type of the other. This affects numeric types only (not string/uri or binary), and it will continue to promote decimal to double, decimal to float, and float to double.&lt;/p&gt;
&lt;p&gt;Where functions (fn:avg, fn:sum, math:pow) refer to the promotion rules, I suggest that we spell out the conversions that happen explictly, since it's not entirely obvious how the rules should be extrapolated. (For example, fn:avg doesn't make it entirely clear what should happen if the first item is a decimal, the second is a float, and the third is a double. Are you expected to "look ahead" to see what types are present, rather than evaluating the average incrementally?)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
