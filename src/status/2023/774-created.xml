<item>
   <title>Issue #774 created</title>
   <pubDate>2023-10-25T12:46:53Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/774</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-774</guid>
   <description>&lt;div&gt;&lt;p&gt;What should be percent-encoded in a URI?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;(This is related to &lt;code&gt;fn:parse-uri&lt;/code&gt;, &lt;code&gt;fn:build-uri&lt;/code&gt;, and &lt;code&gt;fn:decode-from-uri&lt;/code&gt;. I'm making it a distinct issue to call it out and see if we can get consensus on the right answer. I've come to the conclusion that what I've implemented isn't justified by any specific reading of the relevant specifications, so it's wrong.)&lt;/p&gt;
&lt;p&gt;This question is slightly tricky because encoding (or not encoding) characters can change the meaning of the URI.&lt;/p&gt;
&lt;p&gt;If you trace your way through the ABNF in RFC 3986 you eventually get to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   path-abempty  = *( "/" segment )
   path-absolute = "/" [ segment-nz *( "/" segment ) ]
   path-noscheme = segment-nz-nc *( "/" segment )
   path-rootless = segment-nz *( "/" segment )
   path-empty    = 0&amp;lt;pchar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The various &lt;code&gt;segment&lt;/code&gt; nonterminals boil down to some number of &lt;code&gt;pchar&lt;/code&gt;. (The &lt;code&gt;segment-nz&lt;/code&gt; form is used to forbid a zero length string before the first &lt;code&gt;/&lt;/code&gt;; the &lt;code&gt;segment-nz-nc&lt;/code&gt; form is used for a URI that does not begin with a scheme: it must have a non-zero length string before the first &lt;code&gt;/&lt;/code&gt; that additionally must not contain a &lt;code&gt;:&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
  pct-encoded   = "%" HEXDIG HEXDIG
  sub-delims    = "!" / "$" / "&amp;amp;" / "'" / "(" / ")" / "*" / "+" / "," / ";" / "="
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think it follows that all characters &lt;strong&gt;except&lt;/strong&gt; the following must be encoded:&lt;/p&gt;
&lt;p&gt;Upper-and lower-case &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;Z&lt;/code&gt;, the digits &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;9&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;:&lt;/code&gt;, and &lt;code&gt;@&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;or, conversely, that any characters &lt;em&gt;other than those&lt;/em&gt; &lt;strong&gt;must&lt;/strong&gt; be encoded.&lt;/p&gt;
&lt;p&gt;Observe that &lt;code&gt;/&lt;/code&gt; isn't among the characters that are not encoded. That's because the &lt;code&gt;/&lt;/code&gt; in hierarchical URIs divides the segments. It's part of the URI syntax. That's &lt;em&gt;why&lt;/em&gt; a literal forward slash that appears somewhere in an actual path segment must be encoded &lt;code&gt;%2F&lt;/code&gt; and it's why causually unencoding such a character changes the URI.&lt;/p&gt;
&lt;p&gt;Observe also that there's no provision here for encoding a space with &lt;code&gt;+&lt;/code&gt;, even though it's fairly common. I've carried that error through to some of the test results for &lt;code&gt;fn:build-uri&lt;/code&gt; and &lt;code&gt;fn:parse-uri&lt;/code&gt;. I'll fix those tests.&lt;/p&gt;
&lt;p&gt;I'm going to try changing my implementation to follow the rule above and see what happens.&lt;/p&gt;
&lt;p&gt;If you think this analysis is incorrect, please explain where I went wrong.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
