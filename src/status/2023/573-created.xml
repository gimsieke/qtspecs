<item>
   <title>Issue #573 created</title>
   <pubDate>2023-06-26T16:53:46Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/573</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-573</guid>
   <description>&lt;div&gt;&lt;p&gt;Node construction functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;I propose introducing a set of functions that allow node construction in XPath. The basic functions are&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new-document($children as node()*)
new-element($name as QName, $content as node()*)
new-attribute($name as QName, $value as xs:string)
new-namespace($prefix as xs:string, $uri as xs:string)
new-comment($content as xs:string)
new-processing-instruction($name as xs:string, $content as xs:string)
new-text($content as xs:string)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The semantics would be essentially identical to the current node constructors in XQuery and/or the corresponding instructions in XSLT (there are very few differences: a few minor ones, like if there are multiple attributes with the same name, XSLT takes the last, while XQuery throws an error).&lt;/p&gt;
&lt;p&gt;As always, it's difficult to know where to draw the line in functionality between XPath and XQuery. One of the guidelines I use is that if an addition to XPath is likely to be useful to XSLT users, then it's worth including. Clearly these functions are not strictly necessary in XSLT (they could easily be user-supplied as wrappers around XSLT instructions). But to take advantage of some of the other capabilities we're introducing in XPath, node construction functions are increasingly handy. Consider for example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;xsl:copy-of select="interleave(para, new-element(xs:QName(xhtml:br)))"/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's a one-liner that replaces&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;xsl:for-each select="para"&amp;gt;
  &amp;lt;xsl:if test="position() ne 1"&amp;gt;&amp;lt;br/&amp;gt;&amp;lt;/xsl:if&amp;gt;
  &amp;lt;xsl:copy-of select="."/&amp;gt;
&amp;lt;/xsl:for-each&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new functions are also useful in XQuery because although they duplicate existing syntax, the fact that they are functions rather than custom syntax makes them more versatile.&lt;/p&gt;
&lt;p&gt;As with existing constructs in XQuery and XSLT, a naive implementation that follows the semantics literally (which involves copying a subtree when adding an element to a new parent) would be rather inefficient. However, I think that the same established optimizations are equally applicable, for example lazy tree construction and/or push-mode evaluation.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
