<item>
   <title>Issue #686 created</title>
   <pubDate>2023-09-06T21:28:53Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/686</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-686</guid>
   <description>&lt;div&gt;&lt;p&gt;XQFO presentation of diagnostic functions&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;From an informal discussion on Slack, I feel that clarity is needed in the &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#diagnostics"&gt;Diagnostic tracing&lt;/a&gt; section. The problem is that &lt;code&gt;fn:trace()&lt;/code&gt; and &lt;code&gt;fn:log()&lt;/code&gt; introduce the terms "trace output" with no definition or explanation, and this is easily confused with the primary output defined by the function signatures, and affects how readers think about the determinism of the functions. "The serialization of the trace output..." implies that the processor will necessarily serialize something, but I doubt that can or should be presumed. More needs to be said about the responsibilities of the processor in the contract for these functions.&lt;/p&gt;
&lt;p&gt;In my opinion, this section would benefit from a brief preamble, providing context to set the stage for the rules. Some draft text for us to discuss:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Diagnostic tracing functions provide a transfer of information, either from the processor to the dynamic context, or vice versa.&lt;/p&gt;
&lt;p&gt;The function that transfers information from the processor to the dynamic context, &lt;code&gt;fn:stack-trace()&lt;/code&gt;, returns a string that can be further processed and used in the XPath expression and elsewhere in a host language.&lt;/p&gt;
&lt;p&gt;The functions that transfer information from the dynamic context to the processor, &lt;code&gt;fn:trace()&lt;/code&gt; and &lt;code&gt;fn:log()&lt;/code&gt;, each have two effects. The first effect, the output, pertains to the returned values, defined by the function signature and essential to the XPath expression. Such output is always deterministic. The second effect, processor behavior, concerns the way the processor handles the values bound to the parameters, supplied for diagnostic tracing. Processor behavior is always directed toward the user or environment that invoked the processor. Actions may include sending messages, serializing the values and writing them to a log file or database, or something else. Unlike the output (the first effect), the results of processor behavior are implementation-defined and nondeterministic with respect to order of the parameter values.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The draft above attempts to avoid "output" to describe the processor-side diagnostics, so as to avoid potential confusion when dealing with the return-type defined in the signature. Where "trace output" appears in each of the rules, "processor behavior" can be used instead.&lt;/p&gt;
&lt;p&gt;Questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any objections, corrections, or suggestions?&lt;/li&gt;
&lt;li&gt;Any other examples of how a processor might use trace diagnostics?&lt;/li&gt;
&lt;li&gt;Should a paragraph be added to explain briefly how &lt;code&gt;trace()&lt;/code&gt; and &lt;code&gt;log()&lt;/code&gt; differ from &lt;code&gt;xsl:message&lt;/code&gt;? (E.g., a serialized tree should not be presumed.)&lt;/li&gt;
&lt;li&gt;In the informal Balisage birds-of-a-feather discussion this summer, reservations were expressed by participants about the name &lt;code&gt;log()&lt;/code&gt;. Is it possible to drop the function and simply extend the arity of &lt;code&gt;trace()&lt;/code&gt; with a parameter &lt;code&gt;$return-input as xs:boolean? := true()&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
