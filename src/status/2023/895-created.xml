<item>
   <title>Issue #895 created</title>
   <pubDate>2023-12-12T11:47:58Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/895</link>
   <guid>https://qt4cg.org/@qt4cg/2023/#created-895</guid>
   <description>&lt;div&gt;&lt;p&gt;Parameters with default values: allow empty sequences&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We need a consistent approach for defining types of optional function arguments. In most current cases, if a function argument is supplied, it must be non-empty:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;map:get(
  $map       as map(*),
  $key       as xs:anyAtomicType,
  $fallback  as function(xs:anyAtomicType) as item()*  := void#1
) as item()*

fn:starts-with-sequence(
  $input        as item()*,
  $subsequence	as item()*,
  $compare      as function(item(), item()) as xs:boolean  := fn:deep-equal#2
) as xs:boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In some cases, it’s optional:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;fn:replace(
  $value        as xs:string?,
  $pattern      as xs:string,
  $replacement  as xs:string?                                                   := (),
  $flags        as xs:string?                                                   := '',
  $action       as (function(xs:untypedAtomic, xs:untypedAtomic*) as item()?)?  := ()
) as xs:string)

(: #874 :)
fn:subsequence(
  $input   as item()*,
  $start   as xs:double?                                     := (),
  $length  as xs:double?                                     := (),
  $from    as (function(item(), xs:integer) as xs:boolean)?  := (),
  $while   as (function(item(), xs:integer) as xs:boolean)?  := (),
  $until   as (function(item(), xs:integer) as xs:boolean)?  := ()
) as item()*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result, &lt;code&gt;map:get($map, fallback := ())&lt;/code&gt; is invalid, while &lt;code&gt;replace($string, $pattern, action := ())&lt;/code&gt;  would be valid.&lt;/p&gt;
&lt;p&gt;I think it’s better to enforce non-empty arguments (provided that a single item is expected).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
