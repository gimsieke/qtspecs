<item>
   <title>Issue #150 created</title>
   <pubDate>2022-09-21T03:10:12Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/150</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-150</guid>
   <description>&lt;div&gt;&lt;p&gt;fn:ranks: Produce all ranks in applying a function on the items of a sequence&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;We all know the value and usefulness of functions such as &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-highest"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;fn:highest()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://qt4cg.org/specifications/xpath-functions-40/Overview.html#func-lowest"&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;and fn:lowest()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes, when we need to see all rankings of a particular sorting result, for example the rankings of a sport competition, we realize that highest and lowest are just the highest and lowest ranking-groups from all the rankings.&lt;/p&gt;
&lt;p&gt;We define these three overloads for &lt;strong&gt;&lt;code&gt;fn:ranks&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:ranks&lt;/strong&gt;($input as item()*) as array(item()*)*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:ranks&lt;/strong&gt;($input as item()*, $collation as xs:string?) as array(item()*)*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fn:ranks&lt;/strong&gt;($input	 as item()*, $collation	 as xs:string?, 	$key	 as function(item()) as xs:anyAtomicType*) as array(item()*)*&lt;/p&gt;
&lt;p&gt;The rules and semantics for the arguments are the same as those for &lt;strong&gt;fn:highest&lt;/strong&gt;, &lt;strong&gt;fn:lowest&lt;/strong&gt;, &lt;strong&gt;fn:sort&lt;/strong&gt;. What is different is just the result.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Here is one possible XPath implementation and also a complete example&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xq"&gt;let $ranks := function(
                $input as item()*,
                $collation as xs:string?,
                $key as function(item()) as xs:anyAtomicType*) as array(item()*)*
 {
    for $v in sort(distinct-values($input ! $key(.)),  $collation)
     return [$input[$key(.) eq $v]]
 },
 
   $inp := (3, 2, 4),
   $keyfun := function($n) {$n mod 2},
   $theRanks :=  $ranks($inp, (), $keyfun),
   $theHighest := $theRanks[last()], 
   $theLowest := $theRanks[1]
 return
 
   ( "Ranks:", $theRanks,
     "=================",
     "Highest:",
     $theHighest,
     "=================",
     "Lowest:",
     $theLowest
   )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result, as intended is all the rankings (in this case they are just 2 groups of equally-ranked items), then the highest and lowest, extracted as the last and first of the rankings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Ranks:
[(2, 4)]
[3]
=================
Highest:
[3]
=================
Lowest:
[(2, 4)]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
