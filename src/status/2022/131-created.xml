<item>
   <title>Issue #131 created</title>
   <pubDate>2022-08-23T12:49:52Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/131</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-131</guid>
   <description>&lt;div&gt;&lt;p&gt;Expression for binding the Context Value&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;When writing down the proposal in #129, I noticed we have no expression to bind a value to the context value. Such an expression would at least be helpful for formalizing new expressions based on the context (such as a fat arrow that binds sequences),&lt;/p&gt;
&lt;p&gt;Here are two possible constructs for that:&lt;/p&gt;
&lt;h3&gt;1. Context Value Declaration&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;ContextExpr  ::=  "context" "{" Expr "}" EnclosedExpr

(: Example :)
context { //flower } {
  count(.) || ' flowers: ' || string-join(./name, ', ')
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the first expression is the context, the second expression can reference the context.&lt;/p&gt;
&lt;p&gt;A context-binding fat arrow expression &lt;code&gt;U =&amp;gt; { E }&lt;/code&gt; would be equivalent to &lt;code&gt;context { U } { E }&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;2. Enhanced FLWOR expression&lt;/h3&gt;
&lt;p&gt;Similar to variables, the dot could be used to bind and reference the context:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;LetBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? ":=" ExprSingle
ForBinding  ::=  ("." | ("$" VarName)) TypeDeclaration? AllowingEmpty? PositionalVar? "in" ExprSingle

(: Examples :)
let . := //flower
return count(.) || ' flowers: ' || string-join(name, ', ')

for . in //flower
let $name := string(name)
let $petals := string(petals)
return $name || ' has ' || $petals || ' petals'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A context-binding fat arrow expression &lt;code&gt;U =&amp;gt; { E }&lt;/code&gt; would be equivalent to &lt;code&gt;let . := U return E&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Assessment&lt;/h3&gt;
&lt;p&gt;The first solution looks more promising to me. As FLWOR expressions are already very complex, weâ€™d probably need much time to understand all the implications. Next, people may argue that the advantage of FLWOR is readability, and that too many dots make expressions cryptic again.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
