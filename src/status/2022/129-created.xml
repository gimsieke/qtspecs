<item>
   <title>Issue #129 created</title>
   <pubDate>2022-08-18T16:59:16Z</pubDate>
   <link>https://github.com/qt4cg/qtspecs/issues/129</link>
   <guid>https://qt4cg.org/@qt4cg/2022/#created-129</guid>
   <description>&lt;div&gt;&lt;p&gt;Context item → Context value?&lt;/p&gt;&lt;div class="markup"&gt;&lt;p&gt;This has already been discussed before at various places, I’d like to raise it again: What about generalizing the context item and allowing it to reference sequences? Are there definitive showstoppers?&lt;/p&gt;
&lt;h3&gt;The Context Item&lt;/h3&gt;
&lt;p&gt;As its name says, the context item is a container for a single item in the current context. A value that is bound to the context item is referenced with the &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-context-item-expression"&gt;Context Item Expression&lt;/a&gt;, the single dot: &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The context item shares many similarities with variables. The main difference is that it currently cannot be used for sequences. I propose to generalize the semantics and introduce a “context value”:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Items that have formerly been bound to the context item (via the Context Item Declaration, within predicates, the simple map operator, path expressions, the &lt;code&gt;transform with&lt;/code&gt; expression, etc.) are now bound to the context value.&lt;/li&gt;
&lt;li&gt;The revised Context Item Expression returns sequences instead of single items.&lt;/li&gt;
&lt;li&gt;We cannot drop context items completely – for example, we have a &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-context-item-declarations"&gt;Context Item Declaration&lt;/a&gt; in the prolog of XQuery expressions, which uses the &lt;code&gt;item&lt;/code&gt; keyword – but we can treat it as a secondary concept.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Context Value Declaration&lt;/h3&gt;
&lt;p&gt;It has become a common pattern to use &lt;code&gt;declare context item&lt;/code&gt; to bind a document to the context item and process queries on that item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare context item := doc('flowers');
.//flower[name = 'Tigridia']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If data can be distributed across multiple documents (which is often, if not the standard case, in databases), this approach does not work. It would work if we could bind sequences:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;declare context value := collection('flowers');
.//flower[name = 'Tigridia']
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;External Bindings&lt;/h3&gt;
&lt;p&gt;Many processors allow users to bind external values to the context item. This approach is particularly restricting for databases, in which data is often distributed across multiple documents. With the generalized concept, it would get possible to bind sequences and collections to the context. Paths like the following one could be used, no matter if the contents are stored in a single document or in a collection:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;//flower[name = 'Iridaceae']
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Focus Functions&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://qt4cg.org/specifications/xquery-40/xquery-40.html#id-focus-functions"&gt;focus function&lt;/a&gt; provides a compact syntax for common arity-one functions. The single argument is bound it to the context item:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;sort($flowers, (), function { @petals })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the generalization to values, we could easily enhance focus functions to accept arbitrary sequences:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;array:sort($flower-species, (), function { count(.) })
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;let $flowers := array:join(
  for $flower in //flower
  group by $_ := $flower/name
  return [ $flower ]
)
(: some $p in petals satisfies $p gt 4 :)
return array:filter($flowers, function { petals &amp;gt; 4 })
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Use Case: Arrow Expressions&lt;/h3&gt;
&lt;p&gt;The arrow expression provides an intuitive syntax for performing multiple subsequent operations on a given input. With the context value generalization, we could also process chained sequences:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xquery"&gt;//flower[name = 'Psychotria']
=&amp;gt; function { count(.) || ' flower(s) found' }()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
</item>
