:PROPERTIES:
:ID:       83A554C4-E60A-41DA-8189-A221C011DDFC
:END:
#+title: QT4 CG Meeting 052 Minutes 2023-11-07
#+author: Norm Tovey-Walsh
#+filetags: :qt4cg:
#+options: html-style:nil h:6
#+html_head: <link rel="stylesheet" type="text/css" href="/meeting/css/htmlize.css"/>
#+html_head: <link rel="stylesheet" type="text/css" href="../../../css/style.css"/>
#+html_head: <link rel="shortcut icon" href="/img/QT4-64.png" />
#+html_head: <link rel="apple-touch-icon" sizes="64x64" href="/img/QT4-64.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="76x76" href="/img/QT4-76.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="120x120" href="/img/QT4-120.png" type="image/png" />
#+html_head: <link rel="apple-touch-icon" sizes="152x152" href="/img/QT4-152.png" type="image/png" />
#+options: author:nil email:nil creator:nil timestamp:nil
#+startup: showall

[[../][Agenda index]] / [[https://qt4cg.org][QT4CG.org]] / [[https://qt4cg.org/dashboard][Dashboard]] / [[https://github.com/qt4cg/qtspecs/issues][GH Issues]] / [[https://github.com/qt4cg/qtspecs/pulls][GH Pull Requests]]

* Draft Minutes
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: minutes
:END:

* Summary of new and continuing actions [0/8]
:PROPERTIES:
:unnumbered: t
:CUSTOM_ID: new-actions
:END:

+ [ ] QT4CG-052-02: NW to consider how to schedule an “editor’s meeting”
+ [ ] QT4CG-052-01: MP to create a proposal for a ~csv-row-record-creation~ function
+ [ ] QT4CG-052-02: MP to open an issue about supporting comment lines.
+ [ ] QT4CG-052-03: MP to make the changes agreed to #719.
+ [ ] QT4CG-052-04: MP to open an issue about consistency in the names of record types
+ [ ] QT4CG-052-05: MK to rename the ~hexBinary-equal~ function to ~binary-equal~?
+ [ ] QT4CG-052-06: MK to consider the editorial question of “promotion” for the symmetric relations.
+ [ ] QT4CG-052-07: NW to move ~fn:invisible-xml~ to the section on parsing and serialization functions

* Administrivia
:PROPERTIES:
:CUSTOM_ID: administrivia
:END:

** Roll call [11/12]
:PROPERTIES:
:CUSTOM_ID: roll-call
:END:

+ [X] Reece Dunn (RD)
+ [ ] Sasha Firsov (SF)
+ [X] Christian Grün (CG)
+ [X] Joel Kalvesmaki (JK) [:5-]
+ [X] Michael Kay (MK)
+ [X] John Lumley (JL)
+ [X] Dimitre Novatchev (DN)
+ [X] Matt Patterson (MP)
+ [X] Wendell Piez (WP)
+ [X] Ed Porter (EP)
+ [X] C. M. Sperberg-McQueen (MSM)
+ [X] Norm Tovey-Walsh (NW). /Scribe/. /Chair/.

** Accept the agenda
:PROPERTIES:
:CUSTOM_ID: agenda
:END:

Proposal: Accept [[../../agenda/2023/11-07.html][the agenda]].

Accepted.

*** Status so far…
:PROPERTIES:
:CUSTOM_ID: so-far
:END:

#+CAPTION: “Burn down” chart on open issues
#+NAME:   fig:open-issues
[[./issues-open-2023-11-07.png]]

#+CAPTION: Open issues by specification
#+NAME:   fig:open-issues-by-spec
[[./issues-by-spec-2023-11-07.png]]

#+CAPTION: Open issues by type
#+NAME:   fig:open-issues-by-type
[[./issues-by-type-2023-11-07.png]]

** Approve minutes of the previous meeting
:PROPERTIES:
:CUSTOM_ID: approve-minutes
:END:

Proposal: Accept [[../../minutes/2023/10-31.html][the minutes of the previous meeting]].

Accepted.

** Next meeting
:PROPERTIES:
:CUSTOM_ID: next-meeting
:END:

The next meeting [[../../agenda/2023/11-14.html][is scheduled for Tuesday, 14 November 2023]].

No regrets heard.

** Review of open action items [8/8]
:PROPERTIES:
:CUSTOM_ID: open-actions
:END:

+ [X] QT4CG-052-01: MK to propose text for mutual promotion between xs:hexbinary and xs:base64Binary
+ [ ] QT4CG-052-02: NW to consider how to schedule an “editor’s meeting”

** Review of open pull requests and issues
:PROPERTIES:
:CUSTOM_ID: open-pull-requests
:END:

*** Merge without discussion
:PROPERTIES:
:CUSTOM_ID: merge-without-discussion
:END:

The following PRs are editorial, small, or otherwise appeared to be
uncontroversial when the agenda was prepared. The chairs propose that
these can be merged without discussion. If you think discussion is
necessary, please say so.

+ PR [[https://qt4cg.org/dashboard/#pr-813][#813]]: 809 Move fn:atomic-equal to section 14.2
+ PR [[https://qt4cg.org/dashboard/#pr-807][#807]]: 789 Serialization terminology [editorial]
+ PR [[https://qt4cg.org/dashboard/#pr-806][#806]]: A few minor fixes for parse-uri
+ PR [[https://qt4cg.org/dashboard/#pr-804][#804]]: Minor edits, XQFO chh. 7, 8
+ PR [[https://qt4cg.org/dashboard/#pr-803][#803]]: 651: fn:log → fn:message
+ PR [[https://qt4cg.org/dashboard/#pr-802][#802]]: 801: non-deterministic → nondeterministic
+ PR [[https://qt4cg.org/dashboard/#pr-800][#800]]: 660: Static functions, default parameters, XPST0017
+ PR [[https://qt4cg.org/dashboard/#pr-797][#797]]: Edits to parse-uri()
+ PR [[https://qt4cg.org/dashboard/#pr-793][#793]]: 704: Context Value Expression → Context Value Reference
+ PR [[https://qt4cg.org/dashboard/#pr-792][#792]]: 783 XSLT: errors are raised
+ PR [[https://qt4cg.org/dashboard/#pr-790][#790]]: 129 XSLT40 and SER40 changes for context item -> value
+ PR [[https://qt4cg.org/dashboard/#pr-775][#775]]: 517: Reflected Christian Gruen's remarks

Proposal: Accept these PRs without discussion.

Accepted.

*** Close without action
:PROPERTIES:
:CUSTOM_ID: close-without-action
:END:

It has been proposed that the following issues be closed without action.
If you think discussion is necessary, please say so.

+ Issue [[https://github.com/qt4cg/qtspecs/issues/756][#756]]: JSON serialization - number formatting

Proposal: Close without action.

Accepted.

*** XSLT focused
:PROPERTIES:
:CUSTOM_ID: xslt-focused
:END:

The following PRs appear to be candidates for a future XSLT-focussed
meeting.

+ PR [[https://qt4cg.org/dashboard/#pr-792][#792]]: 783 XSLT: errors are raised
+ PR [[https://qt4cg.org/dashboard/#pr-470][#470]]: 369: add fixed-prefixes attribute in XSLT
+ PR [[https://qt4cg.org/dashboard/#pr-412][#412]]: 409, QT4CG-027-01: xsl:next-match

These issues identify the XSLT-focused changes that have been made to
the specifications but which have not been established by the
community group as the status quo.

+ Issue [[https://github.com/qt4cg/qtspecs/issues/742][#742]]: xsl:function-library: keep, drop, or refine?
+ Issue [[https://github.com/qt4cg/qtspecs/issues/169][#169]]: Handling of duplicate keys in xsl:map
+ Issue [[https://github.com/qt4cg/qtspecs/issues/168][#168]]: XSLT Extension Instructions invoking Named Templates

*** Substantive PRs
:PROPERTIES:
:CUSTOM_ID: substantive
:END:

The following substantive PRs were open when this agenda was prepared.

+ PR [[https://qt4cg.org/dashboard/#pr-815][#815]]: 130 Binary Promotion
+ PR [[https://qt4cg.org/dashboard/#pr-798][#798]]: 479: fn:deep-equal: Input order
+ PR [[https://qt4cg.org/dashboard/#pr-795][#795]]: 655: fn:sort-with
+ PR [[https://qt4cg.org/dashboard/#pr-794][#794]]: 216: fn:unparsed-text: End-of-line characters
+ PR [[https://qt4cg.org/dashboard/#pr-791][#791]]: 238: First draft of an fn:invisible-xml function
+ PR [[https://qt4cg.org/dashboard/#pr-772][#772]]: Revise the fn:parse-html rules to make them clearer to follow.
+ PR [[https://qt4cg.org/dashboard/#pr-761][#761]]: 554/754 Simplify the new transitive-closure function
+ PR [[https://qt4cg.org/dashboard/#pr-737][#737]]: 295: Boost the capability of recursive record types
+ PR [[https://qt4cg.org/dashboard/#pr-736][#736]]: 730: Clarify (and correct) rules for maps as instances of function types
+ PR [[https://qt4cg.org/dashboard/#pr-719][#719]]: 413: Spec for CSV-related functions
+ PR [[https://qt4cg.org/dashboard/#pr-529][#529]]: 528: revision of json(), and renaming to elements-to-maps()

*** Proposed for V4.0
:PROPERTIES:
:CUSTOM_ID: proposed-40
:END:

The following issues are labled “proposed for V4.0”.

+ Issue [[https://github.com/qt4cg/qtspecs/issues/716][#716]]: Generators in XPath
+ Issue [[https://github.com/qt4cg/qtspecs/issues/689][#689]]: fn:stack-trace: keep or drop?
+ Issue [[https://github.com/qt4cg/qtspecs/issues/583][#583]]: array:replace(), etc
+ Issue [[https://github.com/qt4cg/qtspecs/issues/340][#340]]: fn:format-number: Specifying decimal format
+ Issue [[https://github.com/qt4cg/qtspecs/issues/260][#260]]: array:index-of
+ Issue [[https://github.com/qt4cg/qtspecs/issues/238][#238]]: Support Invisible XML
+ Issue [[https://github.com/qt4cg/qtspecs/issues/130][#130]]: New super/union type xs:binary?
+ Issue [[https://github.com/qt4cg/qtspecs/issues/91][#91]]: name of map:substitute
+ Issue [[https://github.com/qt4cg/qtspecs/issues/33][#33]]: json parsing number type option
+ Issue [[https://github.com/qt4cg/qtspecs/issues/31][#31]]: Extend FLWOR expressions to maps

* Technical Agenda
:PROPERTIES:
:CUSTOM_ID: technical-agenda
:END:

** PR #719: 413: Spec for CSV-related functions
:PROPERTIES:
:CUSTOM_ID: h-45387788-D3B0-4E76-BE4A-8BE300A582D4
:END:

Matt will join us again this week. It would be nice to see some of
this work merged into the spec.

See PR [[https://qt4cg.org/dashboard/#pr-719][#719]]. 

Matt presents the issues and discussion around #719.

+ As defined, ~parse-csv~ doesn’t do what you expect.
  + The “parse-{format}” function returns the most common use case and
    that’s not what the current version of ~parse-cvs~ does.
  + There are lots of parse functions.
    + But perhaps they aren’t all that useful?
  + On balance, the current style of naming is the least-worst option
    + We have prior art with parse-json and friends in the spec
  + Rename ~csv-to-xdm~ to ~parse-csv~ and then rename it.
    + Perhaps ~csv-to-simple-rows~
  + If there should be only one function, we could add a ~simple-rows~
    option to the ~parse-csv~ function.
  + MP would prefer to keep separate functions
+ Open Knowledge Foundation (OKFN) has a comprehensive guide to types of CSV
  + CSV dialect project
  + There are a couple of substantive changes
    + They allow you to specify a comment character (ignore whole lines)
    + You can specify an escape character to use; but that apparently
      conflicts with field quoting, so nevermind?
  + Enough people have asked about the comment character that it might
    be worth doing.
+ The extra slightly odd function is ~csv-fetch-field-by-column~.
  Aimed at supporting folks with odd CVS structures but still might
  want the convenience of row-records.
  + That seemed to be a little baffling to most people
  + Perhaps instead provide a convienence function to build
    csv-row-records?
+ We should make sure that the record types that we produce have
  meaningful names.
  + MK: That’s a good point.
+ JK: Couldn’t it just be ~csv-to-rows~? What does ~simple~ add?
+ MP: We have ~csv-row-records~ so it would be likely that when rows
  were talked about, people might think of the types, not a simple
  list of strings.
+ JK: What about ~csv-to-columns~? If you let people invert the matrix
  to get arrays of columns they can get fields as they needs.
+ MP: I’m very wary of anything that operates on columns because when
  they’re large, they’re /very very/ large.

Some discussion of large output from ~parse-csv~. More opportunities
for laziness there.

+ CG: Thanks for spending some much time on the proposal. I think I
  would really like to have only one parse function. That way you
  could have ~csv-doc~ and you wouldn’t have to call ~unparsed-text~
  or similar.
  + Plus, if we wanted to add more options in the future, there would
    only be one function.
+ MP: Because they’re quite significantly different formats, I would
  prefer to have them separated out. I don’t think that the options
  are identical is a problem. If there’s a consensus that one function
  is preferable, that wouldn’t be the end of the world.
+ RD: If the return types are different between the different
  functions, I’d prefer them as separate functions. That’s better than
  having ~item()~ or ~item()*~ as a return type. Having that erodes
  type information from things like IDEs.
+ DN: On the same thing, I agree with RD. It’s better to have many
  small functions than one huge one. The single responsiblity
  principle means we should have small functions.
+ MK: I’m just asking about the status of the proposal: how does what
  is on the slides reconcile with PR #719?
  + … You’re proposing an ammendment, correct?
+ MP: Yes. No changes to return types or formats, all that’s being
  proposed here is that some functions are renamed. And we either
  ditch ~csv-fetch-fields-by-column~ or replace it with some other
  convenience function.
+ CG: In the previous proposal, there was a function that was returned
  by a get-row-column type.
+ MP: That’s still included; the idea of ~fetch-fields-by-column~ is
  that function but not bound. It’s a partial application that
  includes the map of column names to column indexes it would behave
  in exactly the same way.

Lots to unpack here.

Would the group prefer ~parse-csv~ with an option, or
~csv-to-(simple)-rows~ function?

Straw poll: one parse-csv function with options, or more functions.

+ Single function: 1
+ Multiple function: 6

Consensus is for more than one function.

What about ~fetch-fields-by-column~?

There seem to be three possibilities:

1. Keep it.
2. Just drop it.
3. Drop it, but also provide some sort of ~csv-row-record-creation~ function

+ NW: If we take option 3 as a seperable proposal, we can make the question simpler.

Straw poll: keep the function or drop it.

+ Keep it: 0
+ Drop it: several

Consensus: drop it.

ACTION: MP to create a proposal for a ~csv-row-record-creation~ function

Some discussion of the question of comment lines…

+ MK: Should we add a filter-text-lines functionality instead?
+ MP: The problem is that because of the way field quoting works, if
  we do it after the fact, a thing that contains a comment line can be
  in a quoted field.
+ CG: My experience is that files are either regular or they’re really
  very strange and the have to be managed manually.

Some discussion of whether or not anyone has actually encountered
OKFN-style files “in the wild”. Comment lines appear to be the only
feature that is common. The RFC explicitly punts on that question.

+ MP: Knowing how OKFN arose, it’s likely that they had experience
  with a lot of data sets. Comment lines have been raised in several
  context, so I think that’s the one that’s worth taking now.
  + … I’ve never seen the escaping thing and I’ve seen some pretty
    weird CSVs. We could come back to that.

Straw poll: Should we support comment lines?

+ In favor: 2.5
+ Opposed: 2

No consensus there.

ACTION: MP to open an issue about supporting comment lines.

ACTION: MP to make the changes agreed to #719.

We’ll plan to put PR #719 on the “merge without discussion list” for
next week.

ACTION: MP to open an issue about consistency in the names of record types

Thank you to MP for his efforts!

** PR #772: Revise the fn:parse-html rules to make them clearer to follow.
:PROPERTIES:
:CUSTOM_ID: pr-772
:END:

See PR [[https://qt4cg.org/dashboard/#pr-772][#772]]

RD reviews the PR.

+ RD: Background is that in the HTML parsing tests in the QT spec,
  there’s been a discussion around parsing of embedded SVG. The
  question is about preserving the case of element names. This also
  applies to case-sensitive attribute names.
  + … I’ve updated the spec to clarify that. MK also noted that the
    ~parse-html~ rule description wasn’t especially readable, so I’ve
    tried to improve that.
  + … I haven’t applied the comment about the fact that the rules
    should describe what the function does; I think it’s clear.
+ RD: I’ve rewritten the rules to address the question of what the
  HTML specification calls the “input byte stream”.
  + … Those were detailed previously, but I’ve reworded it to be
    clearer.
+ RD: From there, I’ve described the sequence of operations that have
  to be performed to construct an HTML document, specifically
  addressing questions of tokenization, HTML document tree, and
  mapping that tree to an XDM.
+ RD: To address the issue of case names, the local name rules have
  been rewritten to explicitly call out the SVG element name mapping,
  but continuing to observe the general casing rules otherwise.
  + … What was a note about local names containing an invalid
    character into explicit rules.
  + … Moved the element namespace URI into the normative text.
+ RD: I’ve done similar changes for attribute local name mapping.
  + … Called out the namespace qualified attributes defined by HTML.
+ RD: Case-sensitive SVG names should now be clear.

Proposal: accept this PR.

Accepted.

** PR #815: 130 Binary Promotion
:PROPERTIES:
:CUSTOM_ID: binary-promotion
:END:

See PR [[https://qt4cg.org/dashboard/#pr-815][#815]]

MK describes the proposal.

+ MK: There are two impacts: one on XQuery/XPath and a minor change to
  the operators part of F&O. But the signifant changes can be reviewed
  in the XPath spec.
  + … There are two main, but largely independent things. First, the
    coercion rules allow you use ~hexBinary~ where ~base64Binary~ is
    required and vice-versa. And the binary operators on binary data
    types have similar changes.
  + … There’s now a single type promotion table. This substantially
    reduces the amount of prose.
  + … There’s a lot more change marking than you might expect because
    I’ve moved the sections around.
+ MK: The other changes is in operator mapping tables.
  + … The way type promotion is described has been changed. We have
    three families of types within which there is mutual promotion;
    this is relevant to the section of operators in the operators table.
  + … We can now speak of “binaries” conceptually as being the same.
+ MK: CG is correct to observe that promotion now refers to two
  different things that could be separated.
+ RD: In that table, should ~hexBinary-equal~ be renamed to ~binary-equal~?
+ MK: Yes, that would be a trivial change.

ACTION: MK to rename the ~hexBinary-equal~ function to ~binary-equal~?

+ JL: We have two kinds of promotion; numeric ones are a sequence, but
  binary and string/uri promotion are symmetric.
+ MK: Yes, using “promotion” for that is a little strange. I can look
  at that editorially.

ACTION: MK to consider the editorial question of “promotion” for the symmetric relations.

Proposal: accept this PR.

Accepted.

** PR #791: 238: First draft of an fn:invisible-xml function
:PROPERTIES:
:CUSTOM_ID: h-0B39D210-D4BA-48A7-9A33-226397A5A6AB
:END:

See PR [[https://qt4cg.org/dashboard/#pr-791][#791]]

+ MK: Looks good to me.
+ CG: I added a last comment; the function could be moved to parsing and serialization.
+ NW: Okay, I can do that.

ACTION: NW to move ~fn:invisible-xml~ to the section on parsing and serialization functions

Proposal: Accept the PR with that change.

Accepted.

** PR #761: 554/754 Simplify the new transitive-closure function
:PROPERTIES:
:CUSTOM_ID: h-4C9F8C65-6987-4637-942C-D498760FC1F5
:END:

See PR [[https://qt4cg.org/dashboard/#pr-761][#761]]

+ MK: CG and DN both expressed concern about the function doing more than it should. 
  + … It also goes beyond the use cases.

MK reviews the PR.

+ MK: You apply the ~step~ function until the results are unchanged.
  + … Removed the min value and the max function.
  + … There’s now an equivalent XQuery implementation.
+ JL: Assumption is that in a finite tree, you’ll always come to an end.
+ MK: Yes, unless you create new nodes.
+ DN: Why is this only on nodes? It could apply to any collection. If
  it’s only nodes, maybe we should put ~-node~ in the name.
+ MK: It could be generalized, but you’d have to provide (or assert)
  an equality function.
+ DN: Would prefer to have it operate on more than nodes.
+ MSM: Getting rid of ~min~ reduces convenience for some minimal
  length; but I can still get paths of at least a certain size.
+ MK: That one’s quite difficult. You can’t always detect the number
  of paths between two nodes.
+ MSM: Speaking abstractly, I prefer if when something is simplified,
  there are ways to get the more complicated things. Maybe we can come
  back to generalizing.
+ DN: I think removing the max parameter is not a problem, especially
  if we can make it return a generator.

Rather than trying to rush the decision, we’ll put this on the “merge
without discussion list for next week as well.

* Any other business?
:PROPERTIES:
:CUSTOM_ID: any-other-business
:END:

None heard.

* Adjourned
:PROPERTIES:
:CUSTOM_ID: adjourned
:END:
